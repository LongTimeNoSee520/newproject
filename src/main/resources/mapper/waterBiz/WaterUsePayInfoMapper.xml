<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zjtc.mapper.waterBiz.WaterUsePayInfoMapper">
	<!-- WaterUsePayInfo的resultMap,column是给数据库列起的别名,它对应property类的属性 -->
	<resultMap id="result_WaterUsePayInfo_Map" type="com.zjtc.model.WaterUsePayInfo">
		<id column="id" property="id" />
		<result column="nodeCode" property="nodeCode" jdbcType="VARCHAR"/>
		<result column="useWaterUnitId" property="useWaterUnitId" jdbcType="VARCHAR"/>
		<result column="unitName" property="unitName" jdbcType="VARCHAR"/>
		<result column="unitCode" property="unitCode" jdbcType="VARCHAR"/>
		<result column="payType" property="payType" jdbcType="VARCHAR"/>
		<result column="invoiceNum" property="invoiceNum" jdbcType="VARCHAR"/>
		<result column="invoicePrintTime" property="invoicePrintTime" jdbcType="TIMESTAMP"/>
		<result column="countQuarter" property="countQuarter" jdbcType="VARCHAR"/>
		<result column="countYear" property="countYear" jdbcType="VARCHAR"/>
		<result column="yearPlan" property="yearPlan" jdbcType="INTEGER"/>
		<result column="quarterPlan" property="quarterPlan" jdbcType="FLOAT"/>
		<result column="basePlan" property="basePlan" jdbcType="FLOAT"/>
		<result column="waterNum1" property="waterNum1" jdbcType="FLOAT"/>
		<result column="waterNum2" property="waterNum2" jdbcType="FLOAT"/>
		<result column="waterNum3" property="waterNum3" jdbcType="FLOAT"/>
		<result column="waterNumAmount" property="waterNumAmount" jdbcType="FLOAT"/>
		<result column="payRatio" property="payRatio" jdbcType="FLOAT"/>
		<result column="price" property="price" jdbcType="FLOAT"/>
		<result column="exceedWater" property="exceedWater" jdbcType="FLOAT"/>
		<result column="multiple" property="multiple" jdbcType="FLOAT"/>
		<result column="actualMultiple" property="actualMultiple" jdbcType="FLOAT"/>
		<result column="amountReceivable" property="amountReceivable" jdbcType="FLOAT"/>
		<result column="actualAmount" property="actualAmount" jdbcType="FLOAT"/>
		<result column="increaseMoney" property="increaseMoney" jdbcType="FLOAT"/>
		<result column="payStatus" property="payStatus" jdbcType="VARCHAR"/>
		<result column="printed" property="printed" jdbcType="VARCHAR"/>
		<result column="warned" property="warned" jdbcType="VARCHAR"/>
		<result column="remarks" property="remarks" jdbcType="VARCHAR"/>
		<result column="auditStatus" property="auditStatus" jdbcType="VARCHAR"/>
		<result column="auditTime" property="auditTime" jdbcType="TIMESTAMP"/>
		<result column="auditPerson" property="auditPerson" jdbcType="VARCHAR"/>
		<result column="auditPersonId" property="auditPersonId" jdbcType="VARCHAR"/>
		<result column="editedActual" property="editedActual" jdbcType="VARCHAR"/>
		<result column="entrusted" property="entrusted" jdbcType="VARCHAR"/>
		<result column="cashCheck" property="cashCheck" jdbcType="VARCHAR"/>
		<result column="transferCheck" property="transferCheck" jdbcType="VARCHAR"/>
		<result column="createTime" property="createTime" jdbcType="TIMESTAMP"/>
	</resultMap>

	<resultMap id="result_WaterUsePayInfoVo_Map" type="com.zjtc.model.vo.WaterUsePayInfoVo">
		<id column="id" property="id" />
		<result column="node_code" property="nodeCode" jdbcType="VARCHAR"/>
		<result column="use_water_unit_id" property="useWaterUnitId" jdbcType="VARCHAR"/>
		<result column="unit_name" property="unitName" jdbcType="VARCHAR"/>
		<result column="unit_code" property="unitCode" jdbcType="VARCHAR"/>
		<result column="pay_type" property="payType" jdbcType="VARCHAR"/>
		<result column="invoice_num" property="invoiceNum" jdbcType="VARCHAR"/>
		<result column="invoice_id" property="invoiceNum" jdbcType="VARCHAR"/>
		<result column="invoice_print_time" property="invoicePrintTime" jdbcType="TIMESTAMP"/>
		<result column="count_quarter" property="countQuarter" jdbcType="VARCHAR"/>
		<result column="count_year" property="countYear" jdbcType="VARCHAR"/>
		<result column="year_plan" property="yearPlan" jdbcType="INTEGER"/>
		<result column="quarter_plan" property="quarterPlan" jdbcType="FLOAT"/>
		<result column="base_plan" property="basePlan" jdbcType="FLOAT"/>
		<result column="water_num1" property="waterNum1" jdbcType="FLOAT"/>
		<result column="water_num2" property="waterNum2" jdbcType="FLOAT"/>
		<result column="water_num3" property="waterNum3" jdbcType="FLOAT"/>
		<result column="water_num_amount" property="waterNumAmount" jdbcType="FLOAT"/>
		<result column="pay_ratio" property="payRatio" jdbcType="FLOAT"/>
		<result column="price" property="price" jdbcType="FLOAT"/>
		<result column="exceed_water" property="exceedWater" jdbcType="FLOAT"/>
		<result column="multiple" property="multiple" jdbcType="FLOAT"/>
		<result column="actual_multiple" property="actualMultiple" jdbcType="FLOAT"/>
		<result column="amount_receivable" property="amountReceivable" jdbcType="FLOAT"/>
		<result column="actual_amount" property="actualAmount" jdbcType="FLOAT"/>
		<result column="increase_money" property="increaseMoney" jdbcType="FLOAT"/>
		<result column="pay_status" property="payStatus" jdbcType="VARCHAR"/>
		<result column="printed" property="printed" jdbcType="VARCHAR"/>
		<result column="warned" property="warned" jdbcType="VARCHAR"/>
		<result column="remarks" property="remarks" jdbcType="VARCHAR"/>
		<result column="audit_status" property="auditStatus" jdbcType="VARCHAR"/>
		<result column="audit_time" property="auditTime" jdbcType="TIMESTAMP"/>
		<result column="audit_person" property="auditPerson" jdbcType="VARCHAR"/>
		<result column="audit_personId" property="auditPersonId" jdbcType="VARCHAR"/>
		<result column="edited_actual" property="editedActual" jdbcType="VARCHAR"/>
		<result column="increaseMoney" property="increaseMoney" jdbcType="VARCHAR"/>
		<result column="entrusted" property="entrusted" jdbcType="VARCHAR"/>
		<result column="cash_check" property="cashCheck" jdbcType="VARCHAR"/>
		<result column="transfer_check" property="transferCheck" jdbcType="VARCHAR"/>
		<result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
		<result column="otherBank" property="otherBank" jdbcType="VARCHAR"/>
		<result column="responsibilityCode" property="responsibilityCode" jdbcType="VARCHAR"/>
		<result column="waterMeterCode" property="waterMeterCode" jdbcType="VARCHAR"/>
		<result column="bankOfDeposit" property="bankOfDeposit" jdbcType="VARCHAR"/>
		<result column="bankAccount" property="bankAccount" jdbcType="VARCHAR"/>
		<result column="baseQuarterPlan" property="baseQuarterPlan" jdbcType="VARCHAR"/>
		<result column="signed" property="signed" jdbcType="VARCHAR"/>
	</resultMap>

	<select id="queryListTotal" resultType="java.util.LinkedHashMap">
		SELECT
		count(t1.id) as counts,
		left(cast(sum(t1.amount_receivable) as DECIMAL(18,6) ) , charindex('.',cast(sum(t1.amount_receivable) as DECIMAL(18,6) )) + 2) as amountReceivableSum,
		left(cast(sum(t1.actual_amount) as DECIMAL(18,6) ) , charindex('.',cast(sum(t1.actual_amount) as DECIMAL(18,6) )) + 2) as actualAmountSum,
		sum(
		case
		t1.pay_status
		when '1' then 1
		else 0 end
		) as payStatusSum,
		sum(
		case
		t1.cash_check
		when '1' then 1
		else 0 end
		) as cashCheckSum,
		sum(
		case
		t1.transfer_check
		when '1' then 1
		else 0 end
		) as transferCheckSum
		FROM
		( SELECT * FROM t_w_water_use_pay_info WHERE 1 = 1
		<!--单位名称关键字查询-->
		<if test="null !=unitName and unitName !=''">
			and unit_name like '%${unitName}%'
		</if>
		<!--单位编号关键字查询-->
		<if test="null !=unitCode and unitCode !=''">
			and unit_code like '%${unitCode}%'
		</if>
		<!--筛选缴费年度-->
		<if test="null !=countYear and countYear !=''">
			and count_year=#{countYear}
		</if>
		<!--筛选缴费季度-->
		<if test="null !=countQuarter and countQuarter !=''">
			and count_quarter=#{countQuarter}
		</if>
		<!--筛选缴费状态-->
		<if test="null !=payStatus and payStatus !=''">
			<choose>
				<when test="payStatus==1">
					and (pay_status='1' or pay_status= '5' )
				</when>
				<when test="payStatus==0">
					<!--这里需要兼容一期的数据，排除2：待审核，3：已审核-->
					and pay_status not in ('1','2','3','5')
				</when>
			</choose>
		</if>
		<!--筛选金额[实收金额]-->
		<if test="null !=actualAmount and actualAmount !=''">
			and 	actual_amount =#{actualAmount}
		</if>
		<!--是否调整-->
		<if test="null !=editedActual and editedActual !=''">
			and	 edited_actual=#{editedActual}
		</if>
		<!--付款方式-->
		<if test="null !=payType and payType !=''">
			and	 pay_type=#{payType}
		</if>
		) t1
		inner join (
		select
		id ,
		[water_meter_code] = STUFF (
		( SELECT ',' + [water_meter_code] FROM t_w_use_water_unit_meter t WHERE t.use_water_unit_id = uu.id FOR XML PATH ( '' ) ),1,1,''),
		responsibility_code,
		unit_code_group
		from t_w_use_water_unit uu
		<!--筛选当前用户可操作的用户类型-->
		inner join (
		SELECT unit_type_code  FROM t_w_use_water_unit_role WHERE person_id =#{userId}
		<!--查询筛选的用户类型-->
		<if test="null !=userType and userType !=''">
			and unit_type_code=#{userType}
		</if>
		group by unit_type_code
		) as tt on uu.unit_code_type=tt.unit_type_code
		where deleted='0'
		) t2 on t2.id=t1.use_water_unit_id
		LEFT JOIN ( SELECT * FROM t_w_bank WHERE main = '1' AND deleted = '0' ) t4 ON t4.use_water_unit_id = t1.use_water_unit_id
		LEFT JOIN ( SELECT * FROM t_w_use_water_base_plan WHERE deleted = '0' ) t5 ON t5.use_water_unit_id = t1.use_water_unit_id
		AND t5.plan_year = t1.count_year
		<!--LEFT JOIN ( SELECT pay_id, max( audit_time ) AS audit_time, max( audit_person ) AS audit_person FROM t_w_refund_or_refund GROUP BY pay_id ) t6 ON t6.pay_id = t1.id-->
		<if test="null !=waterMeterCode and waterMeterCode !=''">
			where  t2.water_meter_code like '%${waterMeterCode}%'
		</if>
	</select>

	<select id="queryPage" resultMap="result_WaterUsePayInfoVo_Map">
		SELECT
		top ${size} temp_row.*
		FROM
		(
		SELECT
		row_number ( ) over (
		ORDER BY
		t2.unit_code_type,
		t2.unit_code
		 ) AS rownumber,
		t1.id,
		t1.pay_type ,
		t1.unit_code ,
		t1.unit_name ,
		t2.unit_code_type ,
		t1.count_year ,
		t1.count_quarter ,
		round(t1.price,2) as price,
		t1.year_plan,
		t1.quarter_plan ,
		t1.water_num1 ,
		t1.water_num2 ,
		t1.water_num3 ,
		t1.water_num_amount ,
		t1.exceed_water ,
		t1.pay_ratio ,
		t1.multiple,
		t1.actual_multiple ,
	  left(cast(t1.amount_receivable as DECIMAL(18,6) ) , charindex('.',cast(t1.amount_receivable as DECIMAL(18,6) )) + 2) as amount_receivable,
		left(cast(t1.actual_amount as DECIMAL(18,6) ) , charindex('.',cast(t1.actual_amount as DECIMAL(18,6) )) + 2) as actual_amount,
		left(cast(t1.increase_money as DECIMAL(18,6) ) , charindex('.',cast(t1.increase_money as DECIMAL(18,6) )) + 2) as increase_money,
		t1.pay_status ,
		<!--托收缴费状态，满足pay_status=1 -->
		case t1.pay_status
		when '1' then 1
		else 0 end as payStatusName,
		t1.entrusted,
		t1.cash_check ,
		t1.transfer_check ,
		t1.printed,
		t1.invoice_num ,
		t1.invoice_print_time ,
		t1.use_water_unit_id,
		t2.responsibility_code AS responsibilityCode,
		t2.water_meter_code as waterMeterCode,
		t4.other_bank AS otherBank,
		t4.bank_of_deposit as bankOfDeposit,
		t4.bank_account as bankAccount,
		t1.remarks,
		<!--基建季计划-->
		case #{countQuarter}
		when '1' then t5.one_quarter
		when '2' then t5.two_quarter
		when '3' then t5.three_quarter
		when '4' then t5.four_quarter
		else '0' end as  baseQuarterPlan,
		<!--是否签约，条件：主户银行账号是否签约-->
		case
		when t4.signed ='1' then '是'
		when t4.signed='0' then '否'
		else '否'
		end as signed
		FROM
		( SELECT * FROM t_w_water_use_pay_info WHERE node_code = #{nodeCode}
		<!--单位名称关键字查询-->
		<if test="null !=unitName and unitName !=''">
			and unit_name like '%${unitName}%'
		</if>
		<!--单位编号关键字查询-->
		<if test="null !=unitCode and unitCode !=''">
			and unit_code like '%${unitCode}%'
		</if>
		<!--筛选缴费年度-->
		<if test="null !=countYear and countYear !=''">
			and count_year=#{countYear}
		</if>
		<!--筛选缴费季度-->
		<if test="null !=countQuarter and countQuarter !=''">
			and count_quarter=#{countQuarter}
		</if>
		<!--筛选缴费状态-->
		<if test="null !=payStatus and payStatus !=''">
			<choose>
				<when test="payStatus==1">
					and (pay_status='1' or pay_status= '5' )
				</when>
				<when test="payStatus==0">
					<!--这里需要兼容一期的数据，排除2：待审核，3：已审核-->
					and pay_status not in ('1','2','3','5')
				</when>
			</choose>
		</if>
		<!--筛选金额[实收金额]-->
		<if test="null !=actualAmount and actualAmount !=''">
			and 	actual_amount =#{actualAmount}
		</if>
		<!--是否调整-->
		<if test="null !=editedActual and editedActual !=''">
			and	 edited_actual=#{editedActual}
		</if>
		<!--付款方式-->
		<if test="null !=payType and payType !=''">
			and	 pay_type=#{payType}
		</if>
		) t1
		inner join (
		select
		id ,
		[water_meter_code] = STUFF (
		( SELECT ',' + [water_meter_code] FROM t_w_use_water_unit_meter t WHERE t.use_water_unit_id = uu.id FOR XML PATH ( '' ) ),1,1,''),
		responsibility_code,
		unit_code_type,
		unit_code
		from t_w_use_water_unit uu
		<!--筛选当前用户可操作的用户类型-->
		inner join (
		SELECT unit_type_code  FROM t_w_use_water_unit_role WHERE person_id =#{userId}
		<!--查询筛选的用户类型-->
		<if test="null !=userType and userType !=''">
			and unit_type_code=#{userType}
		</if>
		group by unit_type_code
		) as tt on uu.unit_code_type=tt.unit_type_code
		where deleted='0'
		) t2 on t2.id=t1.use_water_unit_id
		LEFT JOIN ( SELECT * FROM t_w_bank WHERE deleted = '0' and main='1' ) t4 ON t4.use_water_unit_id = t1.use_water_unit_id
		LEFT JOIN ( SELECT * FROM t_w_use_water_base_plan WHERE deleted = '0' ) t5 ON t5.use_water_unit_id = t1.use_water_unit_id
		AND t5.plan_year = t1.count_year
		<!--LEFT JOIN ( SELECT pay_id, max( audit_time ) AS audit_time, max( audit_person ) AS audit_person FROM t_w_refund_or_refund GROUP BY pay_id ) t6 ON t6.pay_id = t1.id
	-->
		<if test="null !=waterMeterCode and waterMeterCode !=''">
			where  t2.water_meter_code like '%${waterMeterCode}%'
		</if>
		) temp_row
		WHERE
		rownumber > ( (#{current}-1)* #{size} );
	</select>

	<delete id="deleteByParam" >
		delete from t_w_water_use_pay_info
		where pay_status !=1
		and pay_status !=5
		and  edited_actual ='0'
		and  (invoice_num is null or invoice_num='')
		<if test="null !=countYear and countYear !=''">
			and count_year=#{countYear}
		</if><if test="null !=countQuarter and countQuarter !=''">
		and count_quarter > #{countQuarter}
	</if>
		<if test="unitIds.size()>0">
			and use_water_unit_id in
			<foreach collection="unitIds" item="useWaterUnitId" separator="," open="(" close=")">
				#{useWaterUnitId}
			</foreach>
		</if>
	</delete>

	<select id="initPayInfo" resultMap="result_WaterUsePayInfo_Map">

		SELECT
		t6.id,
		nodeCode=#{nodeCode},
		actualAmount = ROUND (  t6.exceedWater * t6.price * t6.multiple,2 ),
		amountReceivable = ROUND (  t6.exceedWater * t6.price * t6.multiple ,2),
		increaseMoney=ROUND (  t6.exceedWater * t6.price * t6.multiple ,2),
		countQuarter,
		countYear,
		exceedWater,
		multiple,
		actualMultiple=multiple,
		payRatio,
		payStatus,
		payType,
		price=ROUND( price,2 ),
		quarterPlan,
		use_water_unit_id as  useWaterUnitId,
		waterNumber1 as  waterNum1,
		waterNumber2 as  waterNum2,
		waterNumber3 as waterNum3,
		waterNumberCount as waterNumAmount,
		yearPlan,
		warned = 0,
		printed=0,
		unit_name as unitName,
		unit_code as unitCode,
		editedActual=0,
		cashCheck ='0',
		transferCheck='0',
		create_time=GETDATE()
		from
		(
		SELECT
		id = STUFF ( STUFF ( use_water_unit_id, 1, 0, countYear ), 1, 0, countQuarter ),
		t5.countQuarter,
		t5.countYear,
		t5.exceedWater,
		(
		CASE

		WHEN payRatio &lt; 10 THEN 1 WHEN ( payRatio &gt;= 10
		AND payRatio &lt; 30 ) THEN 2 WHEN payRatio &gt;= 30 THEN 3
		END
		) AS multiple,
		t5.payRatio,
		payStatus = 0,
		payType = '',
		t5.price,
		t5.quarterPlan,
		t5.use_water_unit_id,
		t5.waterNumber1,
		t5.waterNumber2,
		t5.waterNumber3,
		t5.waterNumberCount,
		t5.yearPlan
		FROM
		(
		SELECT
		t3.*,
		exceedWater = ( waterNumberCount - quarterPlan ),
		CASE
		quarterPlan
		WHEN 0 THEN
		0 ELSE FLOOR( ( ( waterNumberCount - quarterPlan ) / quarterPlan ) * 100 )
		END AS payRatio
		from
		(

		select
		t1.use_water_unit_id,
		t2.price,
		CASE
		countQuarter
		WHEN 'oneQuarter' THEN
		1
		WHEN 'twoQuarter' THEN
		2
		WHEN 'threeQuarter' THEN
		3
		WHEN 'fourQuarter' THEN
		4
		END AS countQuarter,
		CASE
		countQuarter
		WHEN 'oneQuarter' THEN
		( januaryCount + februaryCount + marchCount )
		WHEN 'twoQuarter' THEN
		( aprilCount + mayCount + juneCount )
		WHEN 'threeQuarter' THEN
		( julyCount + augustCount + septemberCount )
		WHEN 'fourQuarter' THEN
		( octoberCount + novemberCount + decemberCount )
		END AS waterNumberCount,
		CASE
		countQuarter
		WHEN 'oneQuarter' THEN
		januaryCount
		WHEN 'twoQuarter' THEN
		aprilCount
		WHEN 'threeQuarter' THEN
		julyCount
		WHEN 'fourQuarter' THEN
		octoberCount
		END AS waterNumber1,
		CASE
		countQuarter
		WHEN 'oneQuarter' THEN
		februaryCount
		WHEN 'twoQuarter' THEN
		mayCount
		WHEN 'threeQuarter' THEN
		augustCount
		WHEN 'fourQuarter' THEN
		novemberCount
		END AS waterNumber2,
		CASE
		countQuarter
		WHEN 'oneQuarter' THEN
		marchCount
		WHEN 'twoQuarter' THEN
		juneCount
		WHEN 'threeQuarter' THEN
		septemberCount
		WHEN 'fourQuarter' THEN
		decemberCount
		END AS waterNumber3,
		quarterPlan,
		plan_year AS countYear,
		curYearPlan AS yearPlan

		from
		(
		SELECT
		p.use_water_unit_id,
		p.plan_year,
		curYearPlan = ( p.cur_year_plan + ISNULL( bp.cur_year_plan, 0 ) ),
		oneQuarter = ( p.first_quarter + ISNULL( bp.one_quarter, 0 ) ),
		twoQuarter  = ( p.second_quarter + ISNULL( bp.two_quarter , 0 ) ),
		threeQuarter = ( p.third_quarter + ISNULL( bp.three_quarter, 0 ) ) ,
		fourQuarter = ( p.fourth_quarter + ISNULL( bp.four_quarter, 0 ) )

		FROM
		( SELECT * FROM t_w_use_water_plan WHERE plan_type = '0' ) p
		LEFT JOIN (SELECT * FROM t_w_use_water_base_plan where deleted='0') bp ON bp.use_water_unit_id = p.use_water_unit_id
		AND bp.plan_year = p.plan_year
		)AS aa UNPIVOT ( [quarterPlan ] FOR [countQuarter] IN ( [oneQuarter],[twoQuarter],[threeQuarter ],[fourQuarter ] ) ) AS t1
		INNER join
		(
		SELECT
		SUM( januaryCount ) AS januaryCount,
		SUM( februaryCount ) AS februaryCount,
		SUM( marchCount ) AS marchCount,
		SUM( aprilCount ) AS aprilCount,
		SUM( mayCount ) AS mayCount,
		SUM( juneCount ) AS juneCount,
		SUM( julyCount ) AS julyCount,
		SUM( augustCount ) AS augustCount,
		SUM( septemberCount ) AS septemberCount,
		SUM( octoberCount ) AS octoberCount,
		SUM( novemberCount ) AS novemberCount,
		SUM( decemberCount ) AS decemberCount,
		min( nowPrice ) AS price,
		use_year as use_year,
		use_water_unit_id
		FROM
		(
		SELECT
		now_price as nowPrice,
		CASE

		WHEN unit_code_group = '33' THEN
		0 ELSE january_count
		END AS januaryCount,
		CASE

		WHEN unit_code_group = '33' THEN
		0 ELSE february_count
		END AS februaryCount,
		CASE

		WHEN unit_code_group = '33' THEN
		0 ELSE march_count
		END AS marchCount,
		CASE

		WHEN unit_code_group = '33' THEN
		january_count + april_count ELSE april_count
		END AS aprilCount,
		CASE

		WHEN unit_code_group = '33' THEN
		february_count + may_count ELSE may_count
		END AS mayCount,
		CASE

		WHEN unit_code_group = '33' THEN
		march_count + june_count ELSE june_count
		END AS juneCount,
		CASE

		WHEN unit_code_group = '33' THEN
		0 ELSE july_count
		END AS julyCount,
		CASE

		WHEN unit_code_group = '33' THEN
		0 ELSE august_count
		END AS augustCount,
		CASE

		WHEN unit_code_group = '33' THEN
		0 ELSE september_count
		END AS septemberCount,
		CASE

		WHEN unit_code_group = '33' THEN
		july_count + october_count ELSE october_count
		END AS octoberCount,
		CASE

		WHEN unit_code_group = '33' THEN
		august_count + november_count ELSE november_count
		END AS novemberCount,
		CASE

		WHEN unit_code_group = '33' THEN
		september_count + december_count ELSE december_count
		END AS decemberCount,
		use_year,
		use_water_unit_id
		FROM
		<!--水使用月数据-->
		t_w_water_month_use_data month_data,
		<!--用水单位-->
		t_w_use_water_unit u
		WHERE
		month_data.use_water_unit_id = u.id
		and u.deleted='0'
		) AS WaterMonthUseData
		GROUP BY
		use_year,
		use_water_unit_id
		) t2 ON t1.use_water_unit_id = t2.use_water_unit_id and t2.use_year=t1.plan_year

		) t3
		) t5
		where
		exceedWater > 0
		) t6
		inner join (select id ,unit_name,unit_code from t_w_use_water_unit where deleted='0') as t7 on t7.id =t6.use_water_unit_id
		WHERE
		t6.id NOT IN (
		SELECT
		t.id
		FROM
		t_w_water_use_pay_info t
		WHERE
		( t.pay_status = 1 OR t.pay_status = 5 or edited_actual ='1' or  invoice_num is not null or invoice_num !='')
		)
		<if test="null !=countYear and  countYear !=''">
			and t6.countYear=#{countYear}
		</if>
		<if test="null !=countQuarter and countQuarter !=''">
			and t6.countQuarter>#{countQuarter}
		</if>
		<if test="unitIds.size()>0">
			and t6.use_water_unit_id in
			<foreach collection="unitIds" item="useWaterUnitId" separator="," open="(" close=")">
				#{useWaterUnitId}
			</foreach>
		</if>
	</select>

	<update id="updateMoney">
		update t_w_water_use_pay_info
		set amount_receivable=amount_receivable-#{money},actual_amount=actual_amount-#{money},edited_actual='1'
		where id=#{id}
	</update>

	<update id="updateActualAmount">
		update t_w_water_use_pay_info
		set amount_receivable=#{actualAmount},actual_amount=#{actualAmount},edited_actual='1'
		where id=#{id}
	</update>

	<select id="findPayBefor" resultType="java.util.LinkedHashMap">
		select
			unit_code as unitCode,
			unit_name as unitName,
			count_quarter as countQuarter,
			count_year  as countYear
		from
		t_w_water_use_pay_info
		where use_water_unit_id=#{unitId}
		and  pay_status != '1'
		and pay_status != '5'
	  order by count_year desc,count_quarter desc
	</select>
	<select id="ThreePayMess" resultType="java.util.LinkedHashMap">

		select
		*
		from
			(
			select
			t1.year,
			t1.quarter,
			case
			when t2.payStatus is null then '无加价'
			else t2.payStatus
			end payStatus
			from
				(
				select
				year=#{year},
				quarter
				from
				t_w_quarter_conf
				) t1
				left join (
				select
				count_year as countYear,
				countQuarter=count_quarter,
				case
				when  pay_status != 1 and pay_status != 5 THEN '未缴纳'
				else '已缴纳' end payStatus
				from
				t_w_water_use_pay_info
				where count_year=#{year}
				and use_water_unit_id=#{unitId}
				) as t2 on t1.quarter=t2.countQuarter and t1.year=t2.countYear

			) bb  PIVOT( max(payStatus) FOR [quarter] IN ([1], [2], [3],[4]) ) a

			UNION ALL
		select
		*
		from
			(
			select
			t1.year,
			t1.quarter,
			case
			when t2.payStatus is null then '无加价'
			else t2.payStatus
			end payStatus
			from
				(
				select
				year=#{year}-1,
				quarter
				from
				t_w_quarter_conf
				) t1
				left join (
				select
				count_year as countYear,
				countQuarter=count_quarter,
				case
				when  pay_status != 1 and pay_status != 5 THEN '未缴纳'
				else '已缴纳' end payStatus
				from
				t_w_water_use_pay_info
				where count_year=#{year}-1
				and use_water_unit_id=#{unitId}
				) as t2 on t1.quarter=t2.countQuarter and t1.year=t2.countYear

			) bb  PIVOT( max(payStatus) FOR [quarter] IN ([1], [2], [3],[4]) ) a

			UNION

		select
		*
		from
			(
			select
			t1.year,
			t1.quarter,
			case
			when t2.payStatus is null then '无加价'
			else t2.payStatus
			end payStatus
			from
				(
				select
				year=#{year}-2,
				quarter
				from
				t_w_quarter_conf
				) t1
				left join (
				select
				count_year as countYear,
				countQuarter=count_quarter,
				case
				when  pay_status != 1 and pay_status != 5 THEN '未缴纳'
				else '已缴纳' end payStatus
				from
				t_w_water_use_pay_info
				where count_year=#{year}-2
				 and use_water_unit_id=#{unitId}
				) as t2 on t1.quarter=t2.countQuarter and t1.year=t2.countYear

			) bb  PIVOT( max(payStatus) FOR [quarter] IN ([1], [2], [3],[4]) ) a
		order by year
			;
	</select>

	<select id="exportPayInfo" resultType="java.util.LinkedHashMap">
		select
		unit_name as unitName,
		price as price,
		year_plan as yearPlan,
		quarter_plan as quarterPlan,
		water_num1 as waterNum1,
		water_num2 as waterNum2,
		water_num3 as waterNum3,
		water_num_amount as waterNumAmount,
		exceed_water as exceedWater,
		pay_ratio as payRatio,
		multiple,
		actual_multiple AS actualMultiple,
		amount_receivable AS amountReceivable,
		actual_amount AS actualAmount,
		<!--托收缴费状态，满足pay_status=1 -->
		case pay_status
		when '1' then '已缴费'
		when '5' then '已缴费'
		else '未缴费' end as payStatus,
		entrusted,
		t4.other_bank AS otherBank,
		t4.bank_of_deposit as bankOfDeposit,
		t4.bank_account as bankAccount,
		<!--是否签约，条件：绑定的银行账号都没有签约-->
		case
		when t4.signed is null then '0'
		else '1' end signed
		from
		t_w_water_use_pay_info as t1
		LEFT JOIN ( SELECT * FROM t_w_bank WHERE deleted = '0' and signed='1') t4 ON t4.use_water_unit_id = t1.use_water_unit_id
		where
		count_year=#{year}
		and count_quarter=#{quarter}
	</select>

	<select id="exportBankInfo" resultType="java.util.LinkedHashMap">
		select
		unit_code as unitCode,
		agreement_number as agreementNumber,
		bank_of_deposit as bankOfDeposit,
		bank_account as bankAccount,
		case
    when entrust_unit_name is null then a.unit_name
    when entrust_unit_name='' then a.unit_name
    else entrust_unit_name end as entrustUnitName,
    actual_amount as actualAmount,
		remark = CAST(count_year as VARCHAR(10)) +'年' + count_quarter + '季度加价水费 ' +focus_user_remark
		from
		(
			select
			*
			from
			t_w_water_use_pay_info as t1
			where
			entrusted='1'
			and count_year=#{year}
			and count_quarter=#{quarter}
		) as a
		inner join
		(
			select
			*
			from t_w_bank
			where signed='1'
			and other_bank='1'
			and deleted='0'
		) as b on a.use_water_unit_id=b.use_water_unit_id
	</select>

	<select id="exportOtherBankInfo" resultType="java.util.LinkedHashMap">
		select
		unit_code as unitCode,
		agreement_number as agreementNumber,
		bank_of_deposit as bankOfDeposit,
		bank_account as bankAccount,
		case
    when entrust_unit_name is null then a.unit_name
    when entrust_unit_name='' then a.unit_name
    else entrust_unit_name end as entrustUnitName,
    actual_amount as actualAmount,
    signed,
		remark = CAST(count_year as VARCHAR(10)) +'年' + count_quarter + '季度加价水费 ' +focus_user_remark
		from
		(
			select
			*
			from
			t_w_water_use_pay_info as t1
			where
			entrusted ='1'
			and count_year=#{year}
			and count_quarter=#{quarter}
		) as a
		inner join
		(
			select
			*
			from t_w_bank
			where signed='1'
			and other_bank !='1'
			and deleted='0'
		) as b on a.use_water_unit_id=b.use_water_unit_id
	</select>


	<select id="selectUser" resultType="java.util.LinkedHashMap">
		select
		id,
		unit_code  as unitCode,
		unit_name as unitName,
		unit_address as unitAddress,
		area_country as areaCountry,
		responsibility_code as responsibilityCode,
		case
		when save_unit_type='1' then '是'
		when save_unit_type is null then '否'
		when save_unit_type='0' then '否'
		else '否' end as saveUnitType,
		case
		when signed='1' then '是'
		when signed is null then '否'
		when signed='0' then '否'
		else '否' end as signed,
		bank_of_deposit as  bankOfDeposit,
		bank_account as bankAccount,
		zip_address as zipAddress,
		zip_name as zipName,
		invoice_unit_name as invoiceUnitName,
		unit_code_type as userType,
		department,
		industry_name=(select industry_name  from t_w_quota_info where id=t2.industry),
		people_bank_pay_sys_number as peopleBankPaySysNumber,
		agreement_number as agreementNumber,
		focus_user_remark as focusUserRemark,
		other_bank as  otherBank,
		abnormal_cause as abnormalCause,
		STUFF((
		SELECT ',' + [water_meter_code]
		FROM t_w_use_water_unit_meter
		WHERE use_water_unit_id=t2.id
		FOR XML PATH('')), 1, 1, ''
		) as waterMeterCode
		from (
		select use_water_unit_id
		from t_w_water_use_pay_info
		where 1=1
		<if test="null !=year">
			and count_year=#{year}
		</if>
		<if test="null !=quarter">
			and count_quarter=#{quarter}
		</if>
		) t1
		inner join (select id,unit_code,unit_name,unit_address,area_country,responsibility_code,save_unit_type,zip_address,zip_name,invoice_unit_name,unit_code_type,industry,department,abnormal_cause from t_w_use_water_unit where deleted='0' and unit_code_type in (select unit_type_code as unit_code_type from t_w_use_water_unit_role where person_id=#{userId} group by unit_type_code))t2 on t2.id=t1.use_water_unit_id
		LEFT JOIN ( SELECT use_water_unit_id,signed,bank_of_deposit,bank_account,people_bank_pay_sys_number,agreement_number,focus_user_remark,other_bank FROM t_w_bank WHERE main = '1' AND deleted = '0' ) t3 ON t3.use_water_unit_id = t2.id
	</select>

	<select id="exportQueryData" resultType="java.util.LinkedHashMap">
		SELECT
		t1.id,
		t1.pay_type as payType,
 		t1.unit_code AS unitCode,
		t1.unit_name AS unitName,
		t2.unit_code_group as unitCodeGroup,
		t1.count_year AS countYear,
		t1.count_quarter AS countQuarter,
		t1.price,
		t1.year_plan AS yearPlan,
		t1.quarter_plan AS quarterPlan,
		t1.water_num1 AS waterNum1,
		t1.water_num2 AS waterNum2,
		t1.water_num2 AS waterNum3,
		t1.water_num_amount AS waterNumAmount,
		t1.exceed_water AS exceedWater,
		t1.pay_ratio AS payRatio,
		t1.multiple,
		t1.actual_multiple AS actualMultiple,
		t1.amount_receivable AS amountReceivable,
		t1.actual_amount AS actualAmount,
		t1.increase_money AS increaseMoney,
		<!--托收缴费状态，满足pay_status=1 -->
		case t1.pay_status
		when '1' then '托收已缴费'
		when '5' then '非托收已缴费'
		else '未缴费' end AS payStatus,
		case t1.entrusted
		when '1' then '是'
		else '否' end as entrusted,
		case t1.cash_check
		when '1' then '已审核'
		else '未审核' end AS cashCheck,
		case t1.transfer_check
		when '1' then '已审核'
		else '未审核' end AS transferCheck,
		t1.printed,
		t1.audit_time AS auditTime,
		t1.audit_person AS auditPerson,
		t1.invoice_num AS invoiceNum,
		t1.invoice_print_time AS invoicePrintTime,
		t2.id as useWaterUnitId,
		t2.responsibility_code AS responsibilityCode,
		t2.water_meter_code as waterMeterCode,
		t4.other_bank AS otherBank,
		t4.bank_of_deposit as bankOfDeposit,
		t4.bank_account as bankAccount,
		t1.remarks,
		<!--基建季计划-->
		case #{countQuarter}
		when '1' then t5.one_quarter
		when '2' then t5.two_quarter
		when '3' then t5.three_quarter
		when '4' then t5.four_quarter
		ELSE '0' end as  baseQuarterPlan,
		<!--是否签约，条件：主户银行账号都没有签约-->
		case
		when t4.signed ='1' then '是'
		when t4.signed='0' then '否'
		ELSE '否'
		end as signed,
		countDate=CAST(count_year AS VARCHAR(5))+'第'+CAST(count_quarter AS  VARCHAR(5))+'季度',
		case
		pay_status
		when '1' THEN '是'
		ELSE '否' END AS isSigning
		FROM
		( SELECT * FROM t_w_water_use_pay_info WHERE 1 = 1
		<!--单位名称关键字查询-->
		<if test="null !=unitName and unitName !=''">
			and unit_name like '%${unitName}%'
		</if>
		<!--单位编号关键字查询-->
		<if test="null !=unitCode and unitCode !=''">
			and unit_code like '%${unitCode}%'
		</if>
		<!--筛选缴费年度-->
		<if test="null !=countYear and countYear !=''">
			and count_year=#{countYear}
		</if>
		<!--筛选缴费季度-->
		<if test="null !=countQuarter and countQuarter !=''">
			and count_quarter=#{countQuarter}
		</if>
		<!--筛选缴费状态-->
		<if test="null !=payStatus and payStatus !=''">
			<choose>
				<when test="payStatus==1">
					and (pay_status='1' or pay_status= '5' )
				</when>
				<when test="payStatus==0">
					<!--这里需要兼容一期的数据，排除2：待审核，3：已审核-->
					and pay_status not in ('1','2','3','5')
				</when>
			</choose>
		</if>
		<!--筛选金额[实收金额]-->
		<if test="null !=actualAmount and actualAmount !=''">
			and 	actual_amount =#{actualAmount}
		</if>
		<!--是否调整-->
		<if test="null !=editedActual and editedActual !=''">
			and	 edited_actual=#{editedActual}
		</if>
		<!--付款方式-->
		<if test="null !=payType and payType !=''">
			and	 pay_type=#{payType}
		</if>
		) t1
		inner join (
		select
		id ,
		[water_meter_code] = STUFF (
		( SELECT ',' + [water_meter_code] FROM t_w_use_water_unit_meter t WHERE t.use_water_unit_id = uu.id FOR XML PATH ( '' ) ),1,1,''),
		responsibility_code,
		unit_code_group
		from t_w_use_water_unit uu
		where deleted='0'
		<!--筛选当前用户可操作的用户类型-->
		and unit_code_type in (select unit_type_code as unit_code_type from t_w_use_water_unit_role where person_id=#{userId} group by unit_type_code)
		<!--查询筛选的用户类型-->
		<if test="null !=userType and userType !=''">
			and unit_code_type=#{userType}
		</if>
		) t2 on t2.id=t1.use_water_unit_id
		LEFT JOIN ( SELECT * FROM t_w_bank WHERE deleted = '0' and main='1' ) t4 ON t4.use_water_unit_id = t1.use_water_unit_id
		LEFT JOIN ( SELECT * FROM t_w_use_water_base_plan WHERE deleted = '0' ) t5 ON t5.use_water_unit_id = t1.use_water_unit_id
		AND t5.plan_year = t1.count_year
		<if test="null !=waterMeterCode and waterMeterCode !=''">
			where  t2.water_meter_code like '%${waterMeterCode}%'
		</if>
		ORDER BY t1.unit_code, unit_code_group, count_quarter DESC
	</select>

	<select id="selectPayNotice" resultType="com.zjtc.model.vo.SendListVO">
		select
		t1.id,
		t1.unit_code as unitCode,
		t1.unit_name as unitName,
		t1.count_year as countYear,
		t1.count_quarter as countQuarter,
		t3.mobile_number as mobileNumber,
		t1.exceed_water as exceedWater,
		t1.increase_money as increaseMoney,
		t3.contacts as receiverName
		from (
		select
		id,
		unit_code,
		unit_name,
		count_year,
		count_quarter,
		exceed_water,
		increase_money
		from t_w_water_use_pay_info
		where node_code=#{nodeCode}
		and  pay_status != '1'
		and substring( unit_code, 5, 2 ) in(select unit_type_code as unit_code_type from t_w_use_water_unit_role where person_id=#{userId} group by unit_type_code)
		and pay_status != '5'
		<if test="null !=year and year !=''">
			and	count_year=#{year}
		</if>
		<if test="null !=unitCode and unitCode !=''">
			and	unit_code like '%${unitCode}%'
		</if>
		) as t1
		inner join (
		select
		unit_code
		from t_w_use_water_unit
		where deleted='0'
		and   unit_code_type in (select unit_type_code as unit_code_type from t_w_use_water_unit_role where person_id=#{userId} group by unit_type_code)
		) as t2 on t2.unit_code =t1.unit_code
		inner JOIN (
		SELECT
		unit_code,
		mobile_number,
		contacts
		from t_w_use_water_unit_contacts
		where deleted='0'
		) as t3 on t3.unit_code=t2.unit_code

	</select>




  <!-- 2021.04.14 yuchen -->

  <update id="updateNotNull" parameterType="com.zjtc.model.WaterUsePayInfo">
    update t_w_water_use_pay_info
    <set>
      <if test="nodeCode != null">node_code = #{nodeCode},</if>
      <if test="useWaterUnitId != null">use_water_unit_id = #{useWaterUnitId},</if>
      <if test="unitName != null">unit_name = #{unitName},</if>
      <if test="unitCode != null">unit_code = #{unitCode},</if>
      <if test="payType != null">pay_type = #{payType},</if>
      <if test="invoiceNum != null">invoice_num = #{invoiceNum},</if>
      <if test="invoicePrintTime != null">invoice_print_time = #{invoicePrintTime},</if>
      <if test="countQuarter != null">count_quarter = #{countQuarter},</if>
      <if test="countYear != null">count_year = #{countYear},</if>
      <if test="yearPlan != null">year_plan = #{yearPlan},</if>
      <if test="quarterPlan != null">quarter_plan = #{quarterPlan},</if>
      <if test="basePlan != null">base_plan = #{basePlan},</if>
      <if test="waterNum1 != null">water_num1 = #{waterNum1},</if>
      <if test="waterNum2 != null">water_num2 = #{waterNum2},</if>
      <if test="waterNum3 != null">water_num3 = #{waterNum3},</if>
      <if test="waterNumAmount != null">water_num_amount = #{waterNumAmount},</if>
      <if test="payRatio != null">pay_ratio = #{payRatio},</if>
      <if test="price != null">price = #{price},</if>
      <if test="exceedWater != null">exceed_water = #{exceedWater},</if>
      <if test="multiple != null">multiple = #{multiple},</if>
      <if test="actualMultiple != null">actual_multiple = #{actualMultiple},</if>
      <if test="amountReceivable != null">amount_receivable = #{amountReceivable},</if>
      <if test="actualAmount != null">actual_amount = #{actualAmount},</if>
      <if test="payStatus != null">pay_status = #{payStatus},</if>
      <if test="printed != null">printed = #{printed},</if>
      <if test="warned != null">warned = #{warned},</if>
      <if test="remarks != null">remarks = #{remarks},</if>
      <if test="auditStatus != null">audit_status = #{auditStatus},</if>
      <if test="auditTime != null">audit_time = #{auditTime},</if>
      <if test="auditPerson != null">audit_person = #{auditPerson},</if>
      <if test="auditPersonId != null">audit_person_id = #{auditPersonId},</if>
      <if test="editedActual != null">edited_actual = #{editedActual},</if>
      <if test="increaseMoney != null">increase_money = #{increaseMoney},</if>
      <if test="entrusted != null">entrusted = #{entrusted},</if>
      <if test="cashCheck != null">cash_check = #{cashCheck},</if>
      <if test="transferCheck != null">transfer_check = #{transferCheck},</if>
      <if test="createTime != null">create_time = #{createTime},</if>
    </set>
    where id = #{id}
  </update>


	<update id="updateInvoiceNum" >
		update t_w_water_use_pay_info set invoice_num = #{invoiceNum} where id = #{id}
	</update>


  <resultMap id="result_PayPrintVo_Map" type="com.zjtc.model.vo.PayPrintVo">
    <result column="unit_name" property="unitName" jdbcType="VARCHAR"/>
    <result column="unit_code" property="unitCode" jdbcType="VARCHAR"/>
    <result column="price" property="price" jdbcType="FLOAT"/>
    <result column="year_plan" property="yearPlan" jdbcType="INTEGER"/>
    <result column="quarter_plan" property="quarterPlan" jdbcType="FLOAT"/>
    <result column="base_plan" property="basePlan" jdbcType="FLOAT"/>
    <result column="water_num1" property="waterNum1" jdbcType="FLOAT"/>
    <result column="water_num2" property="waterNum2" jdbcType="FLOAT"/>
    <result column="water_num3" property="waterNum3" jdbcType="FLOAT"/>
    <result column="water_num_amount" property="waterNumAmount" jdbcType="FLOAT"/>
    <result column="pay_ratio" property="payRatio" jdbcType="FLOAT"/>
    <result column="exceed_water" property="exceedWater" jdbcType="FLOAT"/>
    <result column="multiple" property="multiple" jdbcType="FLOAT"/>
    <result column="amount_receivable" property="amountReceivable" jdbcType="FLOAT"/>
		<result column="remarks" property="remarks" jdbcType="VARCHAR"/>
		<result column="is_signing" property="isSigning" jdbcType="VARCHAR"/>
		<result column="responsibility_code" property="responsibilityCode" jdbcType="VARCHAR"/>
		<result column="bank_of_deposit" property="bankOfDeposit" jdbcType="VARCHAR"/>
		<result column="bank_account" property="bankAccount" jdbcType="VARCHAR"/>
  </resultMap>
	<select id="printExPlan1" resultMap="result_PayPrintVo_Map">
		SELECT
		unit_name,
		unit_code,
		price,
		year_plan,
		quarter_plan,
		water_num1,
		water_num2,
		water_num3,
		water_num_amount,
		pay_ratio,
		exceed_water,
		multiple,
		amount_receivable,
		remarks,
		<!--基建季计划-->
		case #{countQuarter}
		when '1' then t5.one_quarter
		when '2' then t5.two_quarter
		when '3' then t5.three_quarter
		when '4' then t5.four_quarter
		else '0' end as  base_plan
		FROM
		( SELECT
		use_water_unit_id,
		count_year,
		unit_name,
		unit_code,
		price,
		year_plan,
		quarter_plan,
		water_num1,
		water_num2,
		water_num3,
		water_num_amount,
		pay_ratio,
		exceed_water,
		multiple,
		amount_receivable,
		remarks
		FROM t_w_water_use_pay_info WHERE node_code = #{nodeCode}
		<!--单位名称关键字查询-->
		<if test="null !=unitName and unitName !=''">
			and unit_name like '%${unitName}%'
		</if>
		<!--单位编号关键字查询-->
		<if test="null !=unitCode and unitCode !=''">
			and unit_code like '%${unitCode}%'
		</if>
		<!--筛选缴费年度-->
		<if test="null !=countYear and countYear !=''">
			and count_year=#{countYear}
		</if>
		<!--筛选缴费季度-->
		<if test="null !=countQuarter and countQuarter !=''">
			and count_quarter=#{countQuarter}
		</if>
		<!--筛选缴费状态-->
		<if test="null !=payStatus and payStatus !=''">
			<choose>
				<when test="payStatus==1">
					and (pay_status='1' or pay_status= '5' )
				</when>
				<when test="payStatus==0">
					<!--这里需要兼容一期的数据，排除2：待审核，3：已审核-->
					and pay_status not in ('1','2','3','5')
				</when>
			</choose>
		</if>
		<!--筛选金额[实收金额]-->
		<if test="null !=actualAmount and actualAmount !=''">
			and 	actual_amount =#{actualAmount}
		</if>
		<!--是否调整-->
		<if test="null !=editedActual and editedActual !=''">
			and	 edited_actual=#{editedActual}
		</if>
		<!--付款方式-->
		<if test="null !=payType and payType !=''">
			and	 pay_type=#{payType}
		</if>
		) t1
		inner join (
		select
		id ,
		[water_meter_code] = STUFF (
		( SELECT ',' + [water_meter_code] FROM t_w_use_water_unit_meter t WHERE t.use_water_unit_id = uu.id FOR XML PATH ( '' ) ),1,1,''),
		responsibility_code,
		unit_code_group
		from t_w_use_water_unit uu
		where deleted='0'
		<!--查询筛选的用户类型-->
		<if test="null !=unitCodeType and unitCodeType !=''">
			and unit_code_type=#{unitCodeType}
		</if>
		) t2 on t2.id=t1.use_water_unit_id
		LEFT JOIN ( SELECT use_water_unit_id,signed,bank_of_deposit,bank_account FROM t_w_bank WHERE deleted = '0' and main='1' ) t4 ON t4.use_water_unit_id = t1.use_water_unit_id
		LEFT JOIN ( SELECT use_water_unit_id,plan_year,one_quarter,two_quarter,three_quarter,four_quarter FROM t_w_use_water_base_plan WHERE deleted = '0' ) t5 ON t5.use_water_unit_id = t1.use_water_unit_id
		AND t5.plan_year = t1.count_year
		<if test="null !=waterMeterCode and waterMeterCode !=''">
			where  t2.water_meter_code like '%${waterMeterCode}%'
		</if>

	</select>
	<select id="printExPlan2" resultMap="result_PayPrintVo_Map">
		SELECT
		unit_name,
		unit_code,
		round(price,2) as price,
		year_plan,
		quarter_plan,
		water_num1,
		water_num2,
		water_num3,
		water_num_amount,
		pay_ratio,
		exceed_water,
		multiple,
		amount_receivable,
		remarks,
		<!--基建季计划-->
		case #{countQuarter}
		when '1' then t5.one_quarter
		when '2' then t5.two_quarter
		when '3' then t5.three_quarter
		when '4' then t5.four_quarter
		else '0' end as  base_plan,
		<!--是否签约，条件：主户银行账号是否签约-->
		case
		when t4.signed ='1' then '是'
		when t4.signed='0' then '否'
		else '否'
		end as is_signing,
		case when t2.responsibility_code=null or t2.responsibility_code='' then '否'
		else '是' end as responsibility_code ,
		bank_of_deposit ,
		bank_account
		FROM
		( SELECT
		use_water_unit_id,
		count_year,
		unit_name,
		unit_code,
		round(price,2) as price,
		year_plan,
		quarter_plan,
		water_num1,
		water_num2,
		water_num3,
		water_num_amount,
		pay_ratio,
		exceed_water,
		multiple,
		amount_receivable,
		remarks
		FROM t_w_water_use_pay_info WHERE node_code = #{nodeCode}
		<!--单位名称关键字查询-->
		<if test="null !=unitName and unitName !=''">
			and unit_name like '%${unitName}%'
		</if>
		<!--单位编号关键字查询-->
		<if test="null !=unitCode and unitCode !=''">
			and unit_code like '%${unitCode}%'
		</if>
		<!--筛选缴费年度-->
		<if test="null !=countYear and countYear !=''">
			and count_year=#{countYear}
		</if>
		<!--筛选缴费季度-->
		<if test="null !=countQuarter and countQuarter !=''">
			and count_quarter=#{countQuarter}
		</if>
		<!--筛选缴费状态-->
		<if test="null !=payStatus and payStatus !=''">
			<choose>
				<when test="payStatus==1">
					and (pay_status='1' or pay_status= '5' )
				</when>
				<when test="payStatus==0">
					<!--这里需要兼容一期的数据，排除2：待审核，3：已审核-->
					and pay_status not in ('1','2','3','5')
				</when>
			</choose>
		</if>
		<!--筛选金额[实收金额]-->
		<if test="null !=actualAmount and actualAmount !=''">
			and 	actual_amount =#{actualAmount}
		</if>
		<!--是否调整-->
		<if test="null !=editedActual and editedActual !=''">
			and	 edited_actual=#{editedActual}
		</if>
		<!--付款方式-->
		<if test="null !=payType and payType !=''">
			and	 pay_type=#{payType}
		</if>
		) t1
		inner join (
		select
		id ,
		[water_meter_code] = STUFF (
		( SELECT ',' + [water_meter_code] FROM t_w_use_water_unit_meter t WHERE t.use_water_unit_id = uu.id FOR XML PATH ( '' ) ),1,1,''),
		responsibility_code,
		unit_code_group
		from t_w_use_water_unit uu
		where deleted='0'
		<!--查询筛选的用户类型-->
		<if test="null !=unitCodeType and unitCodeType !=''">
			and unit_code_type=#{unitCodeType}
		</if>
		) t2 on t2.id=t1.use_water_unit_id
		LEFT JOIN ( SELECT use_water_unit_id,signed,bank_of_deposit,bank_account FROM t_w_bank WHERE deleted = '0' and main='1' ) t4 ON t4.use_water_unit_id = t1.use_water_unit_id
		LEFT JOIN ( SELECT use_water_unit_id,plan_year,one_quarter,two_quarter,three_quarter,four_quarter FROM t_w_use_water_base_plan WHERE deleted = '0' ) t5 ON t5.use_water_unit_id = t1.use_water_unit_id
		AND t5.plan_year = t1.count_year
		<if test="null !=waterMeterCode and waterMeterCode !=''">
			where  t2.water_meter_code like '%${waterMeterCode}%'
		</if>
	</select>
	<!--查询当前用户拥有的所有用户类型-->
	<select id="queryCodeTypeByPersonId" resultType="java.lang.String">
		select
		unit_type_code as unit_type_code
		 from t_w_use_water_unit_role
		 where 1=1
		<if test="null !=nodeCode"> and node_code=#{nodeCode}</if>
		<if test="null !=userId"> and person_id=#{userId} </if>
		 group by unit_type_code
	</select>

	<update id="updatePrinted">
		update t_w_water_use_pay_info
 		set printed='1'
 		where id in
		<foreach collection="ids" item="id" separator="," open="(" close=")">
			#{id}
		</foreach>
	</update>
</mapper>
