<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zjtc.mapper.WaterUsePayInfoMapper">
	<!-- WaterUsePayInfo的resultMap,column是给数据库列起的别名,它对应property类的属性 -->
	<resultMap id="result_WaterUsePayInfo_Map" type="com.zjtc.model.WaterUsePayInfo">
		<id column="id" property="id" />
		<result column="nodeCode" property="nodeCode" jdbcType="VARCHAR"/>
		<result column="useWaterUnitId" property="useWaterUnitId" jdbcType="VARCHAR"/>
		<result column="unitName" property="unitName" jdbcType="VARCHAR"/>
		<result column="unitCode" property="unitCode" jdbcType="VARCHAR"/>
		<result column="payType" property="payType" jdbcType="VARCHAR"/>
		<result column="invoiceNum" property="invoiceNum" jdbcType="VARCHAR"/>
		<result column="invoicePrintTime" property="invoicePrintTime" jdbcType="TIMESTAMP"/>
		<result column="countQuarter" property="countQuarter" jdbcType="VARCHAR"/>
		<result column="countYear" property="countYear" jdbcType="VARCHAR"/>
		<result column="yearPlan" property="yearPlan" jdbcType="INTEGER"/>
		<result column="quarterPlan" property="quarterPlan" jdbcType="FLOAT"/>
		<result column="basePlan" property="basePlan" jdbcType="FLOAT"/>
		<result column="waterNum1" property="waterNum1" jdbcType="FLOAT"/>
		<result column="waterNum2" property="waterNum2" jdbcType="FLOAT"/>
		<result column="waterNum3" property="waterNum3" jdbcType="FLOAT"/>
		<result column="waterNumAmount" property="waterNumAmount" jdbcType="FLOAT"/>
		<result column="payRatio" property="payRatio" jdbcType="FLOAT"/>
		<result column="price" property="price" jdbcType="FLOAT"/>
		<result column="exceedWater" property="exceedWater" jdbcType="FLOAT"/>
		<result column="multiple" property="multiple" jdbcType="FLOAT"/>
		<result column="actualMultiple" property="actualMultiple" jdbcType="FLOAT"/>
		<result column="amountReceivable" property="amountReceivable" jdbcType="FLOAT"/>
		<result column="actualAmount" property="actualAmount" jdbcType="FLOAT"/>
		<result column="payStatus" property="payStatus" jdbcType="VARCHAR"/>
		<result column="printed" property="printed" jdbcType="VARCHAR"/>
		<result column="warned" property="warned" jdbcType="VARCHAR"/>
		<result column="remarks" property="remarks" jdbcType="VARCHAR"/>
		<result column="auditStatus" property="auditStatus" jdbcType="VARCHAR"/>
		<result column="auditTime" property="auditTime" jdbcType="TIMESTAMP"/>
		<result column="auditPerson" property="auditPerson" jdbcType="VARCHAR"/>
		<result column="auditPersonId" property="auditPersonId" jdbcType="VARCHAR"/>
		<result column="editedActual" property="editedActual" jdbcType="VARCHAR"/>
		<result column="entrusted" property="entrusted" jdbcType="VARCHAR"/>
		<result column="cashCheck" property="cashCheck" jdbcType="VARCHAR"/>
		<result column="transferCheck" property="transferCheck" jdbcType="VARCHAR"/>
		<result column="createTime" property="createTime" jdbcType="TIMESTAMP"/>
	</resultMap>

	<select id="queryListTotal" resultType="java.util.LinkedHashMap">
		SELECT
		count(t1.id) as counts,
		sum(t1.amount_receivable) as amountReceivableSum,
		sum(t1.actual_amount) as actualAmountSum,
		sum(
		case
		t1.pay_status
		when '1' then 1
		else 0 end
		) as payStatusSum,
		sum(
		case
		t1.cash_check
		when '1' then 1
		else 0 end
		) as cashCheckSum,
		sum(
		case
		t1.transfer_check
		when '1' then 1
		else 0 end
		) as transferCheckSum
		FROM
		( SELECT * FROM t_w_water_use_pay_info WHERE 1 = 1
		<!--单位名称关键字查询-->
		<if test="null !=unitName and unitName !=''">
			and unit_name like '%${unitName}%'
		</if>
		<!--单位编号关键字查询-->
		<if test="null !=unitCode and unitCode !=''">
			and unit_code like '%${unitCode}%'
		</if>
		<!--筛选缴费年度-->
		<if test="null !=countYear and countYear !=''">
			and count_year=#{countYear}
		</if>
		<!--筛选缴费季度-->
		<if test="null !=countQuarter and countQuarter !=''">
			and count_quarter=#{countQuarter}
		</if>
		<!--筛选缴费状态-->
		<if test="null !=payStatus and payStatus !=''">
			<choose>
				<when test="payStatus==1">
					and (pay_status='1' or pay_status= '5' )
				</when>
				<when test="payStatus==0">
					<!--这里需要兼容一期的数据，排除2：待审核，3：已审核-->
					and pay_status not in ('1','2','3','5')
				</when>
			</choose>
		</if>
		<!--筛选金额[实收金额]-->
		<if test="null !=actualAmount and actualAmount !=''">
			and 	actual_amount =#{actualAmount}
		</if>
		<!--是否调整-->
		<if test="null !=editedActual and editedActual !=''">
			and	 edited_actual=#{editedActual}
		</if>
		<!--付款方式-->
		<if test="null !=payType and payType !=''">
			and	 pay_type=#{payType}
		</if>
		) t1
		inner join (
		select
		id ,
		[water_meter_code] = STUFF (
		( SELECT ',' + [water_meter_code] FROM t_w_use_water_unit_meter t WHERE t.use_water_unit_id = uu.id FOR XML PATH ( '' ) ),1,1,''),
		responsibility_code,
		unit_code_group
		from t_w_use_water_unit uu
		where deleted='0'
		<!--筛选当前用户可操作的用户类型-->
		and unit_code_type in (select unit_type_code as unit_code_type from t_w_use_water_unit_role where person_id=#{userId})
		<!--查询筛选的用户类型-->
		<if test="null !=userType and userType !=''">
			and unit_code_type=#{userType}
		</if>
		) t2 on t2.id=t1.use_water_unit_id
		LEFT JOIN ( SELECT * FROM t_w_bank WHERE main = '1' AND deleted = '0' ) t4 ON t4.use_water_unit_id = t1.use_water_unit_id
		LEFT JOIN ( SELECT * FROM t_w_use_water_base_plan WHERE deleted = '0' ) t5 ON t5.use_water_unit_id = t1.use_water_unit_id
		AND t5.plan_year = t1.count_year
		<!--LEFT JOIN ( SELECT pay_id, max( audit_time ) AS audit_time, max( audit_person ) AS audit_person FROM t_w_refund_or_refund GROUP BY pay_id ) t6 ON t6.pay_id = t1.id-->
		<if test="null !=waterMeterCode and waterMeterCode !=''">
			where  t2.water_meter_code like '%${waterMeterCode}%'
		</if>
	</select>

	<select id="queryPage" resultType="java.util.LinkedHashMap">
		SELECT
			top ${size} temp_row.*
		FROM
			(
		SELECT
			row_number ( ) over ( ORDER BY t1.unit_code, unit_code_group, count_quarter DESC ) AS rownumber,
			t1.id,
			t1.pay_type,
			t1.unit_code AS unitCode,
			t1.unit_name AS unitName,
			t2.unit_code_group,
			t1.count_year AS countYear,
			t1.count_quarter AS countQuarter,
			t1.price,
			t1.year_plan AS yearPlan,
			t1.quarter_plan AS quarterPlan,
			t1.water_num1 AS waterNum1,
			t1.water_num2 AS waterNum2,
			t1.water_num2 AS waterNum3,
			t1.water_num_amount AS wateNumAmount,
			t1.exceed_water AS exceedWater,
			t1.pay_ratio AS payRatio,
			t1.multiple,
			t1.actual_multiple AS actualMultiple,
			t1.amount_receivable AS amountReceivable,
			t1.actual_amount AS actualAmount,
			t1.pay_status AS payStatus,
			t1.entrusted,
			t1.cash_check AS cashCheck,
			t1.transfer_check AS transferCheck,
			t1.printed,
			t1.audit_time AS auditTime,
			t1.audit_person AS auditPerson,
			t1.invoice_num AS invoiceNum,
			t1.invoice_print_time AS invoicePrintTime,
			t2.id as useWaterUnitId,
			t2.responsibility_code AS responsibilityCode,
		  t2.water_meter_code as waterMeterCode,
			t4.bank_code AS bankCode,
			t4.signed,
			t5.cur_year_plan AS curYearPlan
		FROM
			( SELECT * FROM t_w_water_use_pay_info WHERE 1 = 1
		<!--单位名称关键字查询-->
		<if test="null !=unitName and unitName !=''">
			and unit_name like '%${unitName}%'
		</if>
		<!--单位编号关键字查询-->
		<if test="null !=unitCode and unitCode !=''">
			and unit_code like '%${unitCode}%'
		</if>
		<!--筛选缴费年度-->
		<if test="null !=countYear and countYear !=''">
			and count_year=#{countYear}
		</if>
		<!--筛选缴费季度-->
		<if test="null !=countQuarter and countQuarter !=''">
			and count_quarter=#{countQuarter}
		</if>
		<!--筛选缴费状态-->
		<if test="null !=payStatus and payStatus !=''">
			<choose>
				<when test="payStatus==1">
					and (pay_status='1' or pay_status= '5' )
				</when>
				<when test="payStatus==0">
					<!--这里需要兼容一期的数据，排除2：待审核，3：已审核-->
					and pay_status not in ('1','2','3','5')
				</when>
			</choose>
		</if>
		<!--筛选金额[实收金额]-->
		<if test="null !=actualAmount and actualAmount !=''">
			and 	actual_amount =#{actualAmount}
		</if>
		<!--是否调整-->
		<if test="null !=editedActual and editedActual !=''">
			and	 edited_actual=#{editedActual}
		</if>
		<!--付款方式-->
		<if test="null !=payType and payType !=''">
			and	 pay_type=#{payType}
		</if>
			 ) t1
			inner join (
			select
			 id ,
	   [water_meter_code] = STUFF (
		( SELECT ',' + [water_meter_code] FROM t_w_use_water_unit_meter t WHERE t.use_water_unit_id = uu.id FOR XML PATH ( '' ) ),1,1,''),
			 responsibility_code,
			 unit_code_group
			 from t_w_use_water_unit uu
			 where deleted='0'
				<!--筛选当前用户可操作的用户类型-->
				and unit_code_type in (select unit_type_code as unit_code_type from t_w_use_water_unit_role where person_id=#{userId})
				<!--查询筛选的用户类型-->
				<if test="null !=userType and userType !=''">
					and unit_code_type=#{userType}
				</if>
			 ) t2 on t2.id=t1.use_water_unit_id
			LEFT JOIN ( SELECT * FROM t_w_bank WHERE main = '1' AND deleted = '0' ) t4 ON t4.use_water_unit_id = t1.use_water_unit_id
			LEFT JOIN ( SELECT * FROM t_w_use_water_base_plan WHERE deleted = '0' ) t5 ON t5.use_water_unit_id = t1.use_water_unit_id
			AND t5.plan_year = t1.count_year
		<!--LEFT JOIN ( SELECT pay_id, max( audit_time ) AS audit_time, max( audit_person ) AS audit_person FROM t_w_refund_or_refund GROUP BY pay_id ) t6 ON t6.pay_id = t1.id
	-->
		<if test="null !=waterMeterCode and waterMeterCode !=''">
			where  t2.water_meter_code like '%${waterMeterCode}%'
		</if>
			) temp_row
		WHERE
			rownumber > ( (#{current}-1)* #{size} );
	</select>

	<delete id="deleteByParam" >
		delete from t_w_water_use_pay_info
		where pay_status !=1
		and pay_status !=5
		and  edited_actual ='0'
		and  (invoice_num is null or invoice_num='')
		<if test="null !=countYear">
		 and count_year=#{countYear}
		</if><if test="null !=countQuarter">
		 and count_quarter=#{countQuarter}
		</if>
		<if test="unitIds.size()>0">
			and use_water_unit_id in
			<foreach collection="unitIds" item="useWaterUnitId" separator="," open="(" close=")">
				#{useWaterUnitId}
			</foreach>
		</if>
	</delete>

	<select id="initPayInfo" resultMap="result_WaterUsePayInfo_Map">

		SELECT
		t6.id,
		nodeCode=#{nodeCode},
		actualAmount = CONVERT ( DECIMAL ( 18, 2 ), t6.exceedWater * t6.price * t6.multiple ),
		amountReceivable = CONVERT ( DECIMAL ( 18, 2 ), t6.exceedWater * t6.price * t6.multiple ),
		countQuarter,
		countYear,
		exceedWater,
		multiple,
		actualMultiple=multiple,
		payRatio,
		payStatus,
		payType,
		price,
		quarterPlan,
		use_water_unit_id as  useWaterUnitId,
		waterNumber1 as  waterNum1,
		waterNumber2 as  waterNum2,
		waterNumber3 as waterNum3,
		waterNumberCount as waterNumAmount,
		yearPlan,
		warned = 0,
		printed=0,
		unit_name as unitName,
		unit_code as unitCode,
		editedActual=0
		from
		(
		SELECT
		id = STUFF ( STUFF ( use_water_unit_id, 1, 0, countYear ), 1, 0, countQuarter ),
		t5.countQuarter,
		t5.countYear,
		t5.exceedWater,
		(
		CASE

		WHEN payRatio &lt; 10 THEN 1 WHEN ( payRatio &gt;= 10
		AND payRatio &lt; 30 ) THEN 2 WHEN payRatio &gt;= 30 THEN 3
		END
		) AS multiple,
		t5.payRatio,
		payStatus = 0,
		payType = 0,
		t5.price,
		t5.quarterPlan,
		t5.use_water_unit_id,
		t5.waterNumber1,
		t5.waterNumber2,
		t5.waterNumber3,
		t5.waterNumberCount,
		t5.yearPlan
		FROM
		(
		SELECT
		t3.*,
		exceedWater = ( waterNumberCount - quarterPlan ),
		CASE
		quarterPlan
		WHEN 0 THEN
		0 ELSE FLOOR( ( ( waterNumberCount - quarterPlan ) / quarterPlan ) * 100 )
		END AS payRatio
		from
		(

		select
		t1.use_water_unit_id,
		t2.price,
		CASE
		countQuarter
		WHEN 'oneQuarter' THEN
		1
		WHEN 'twoQuarter' THEN
		2
		WHEN 'threeQuarter' THEN
		3
		WHEN 'fourQuarter' THEN
		4
		END AS countQuarter,
		CASE
		countQuarter
		WHEN 'oneQuarter' THEN
		( januaryCount + februaryCount + marchCount )
		WHEN 'twoQuarter' THEN
		( aprilCount + mayCount + juneCount )
		WHEN 'threeQuarter' THEN
		( julyCount + augustCount + septemberCount )
		WHEN 'fourQuarter' THEN
		( octoberCount + novemberCount + decemberCount )
		END AS waterNumberCount,
		CASE
		countQuarter
		WHEN 'oneQuarter' THEN
		januaryCount
		WHEN 'twoQuarter' THEN
		aprilCount
		WHEN 'threeQuarter' THEN
		julyCount
		WHEN 'fourQuarter' THEN
		octoberCount
		END AS waterNumber1,
		CASE
		countQuarter
		WHEN 'oneQuarter' THEN
		februaryCount
		WHEN 'twoQuarter' THEN
		mayCount
		WHEN 'threeQuarter' THEN
		augustCount
		WHEN 'fourQuarter' THEN
		novemberCount
		END AS waterNumber2,
		CASE
		countQuarter
		WHEN 'oneQuarter' THEN
		marchCount
		WHEN 'twoQuarter' THEN
		juneCount
		WHEN 'threeQuarter' THEN
		septemberCount
		WHEN 'fourQuarter' THEN
		decemberCount
		END AS waterNumber3,
		quarterPlan,
		plan_year AS countYear,
		curYearPlan AS yearPlan

		from
		(
		SELECT
		p.use_water_unit_id,
		p.plan_year,
		curYearPlan = ( p.cur_year_plan + ISNULL( bp.cur_year_plan, 0 ) ),
		oneQuarter = ( p.first_quarter + ISNULL( bp.one_quarter, 0 ) ),
		twoQuarter  = ( p.second_quarter + ISNULL( bp.two_quarter , 0 ) ),
		threeQuarter = ( p.third_quarter + ISNULL( bp.three_quarter, 0 ) ) ,
		fourQuarter = ( p.fourth_quarter + ISNULL( bp.four_quarter, 0 ) )

		FROM
		( SELECT * FROM t_w_use_water_plan WHERE plan_type = '0' ) p
		LEFT JOIN t_w_use_water_base_plan bp ON bp.use_water_unit_id = p.use_water_unit_id
		AND bp.plan_year = p.plan_year
		)AS aa UNPIVOT ( [quarterPlan ] FOR [countQuarter] IN ( [oneQuarter],[twoQuarter],[threeQuarter ],[fourQuarter ] ) ) AS t1
		INNER join
		(
		SELECT
		SUM( januaryCount ) AS januaryCount,
		SUM( februaryCount ) AS februaryCount,
		SUM( marchCount ) AS marchCount,
		SUM( aprilCount ) AS aprilCount,
		SUM( mayCount ) AS mayCount,
		SUM( juneCount ) AS juneCount,
		SUM( julyCount ) AS julyCount,
		SUM( augustCount ) AS augustCount,
		SUM( septemberCount ) AS septemberCount,
		SUM( octoberCount ) AS octoberCount,
		SUM( novemberCount ) AS novemberCount,
		SUM( decemberCount ) AS decemberCount,
		min( nowPrice ) AS price,
		use_year as use_year,
		use_water_unit_id
		FROM
		(
		SELECT
		now_price as nowPrice,
		CASE

		WHEN unit_code_group = '33' THEN
		0 ELSE january_count
		END AS januaryCount,
		CASE

		WHEN unit_code_group = '33' THEN
		0 ELSE february_count
		END AS februaryCount,
		CASE

		WHEN unit_code_group = '33' THEN
		0 ELSE march_count
		END AS marchCount,
		CASE

		WHEN unit_code_group = '33' THEN
		january_count + april_count ELSE april_count
		END AS aprilCount,
		CASE

		WHEN unit_code_group = '33' THEN
		february_count + may_count ELSE may_count
		END AS mayCount,
		CASE

		WHEN unit_code_group = '33' THEN
		march_count + june_count ELSE june_count
		END AS juneCount,
		CASE

		WHEN unit_code_group = '33' THEN
		0 ELSE july_count
		END AS julyCount,
		CASE

		WHEN unit_code_group = '33' THEN
		0 ELSE august_count
		END AS augustCount,
		CASE

		WHEN unit_code_group = '33' THEN
		0 ELSE september_count
		END AS septemberCount,
		CASE

		WHEN unit_code_group = '33' THEN
		july_count + october_count ELSE october_count
		END AS octoberCount,
		CASE

		WHEN unit_code_group = '33' THEN
		august_count + november_count ELSE november_count
		END AS novemberCount,
		CASE

		WHEN unit_code_group = '33' THEN
		september_count + december_count ELSE december_count
		END AS decemberCount,
		use_year,
		use_water_unit_id
		FROM
		<!--水使用月数据-->
		t_w_water_month_use_data month_data,
		<!--用水单位-->
		t_w_use_water_unit u
		WHERE
		month_data.use_water_unit_id = u.id
		and u.deleted='0'
		) AS WaterMonthUseData
		GROUP BY
		use_year,
		use_water_unit_id
		) t2 ON t1.use_water_unit_id = t2.use_water_unit_id and t2.use_year=t1.plan_year

		) t3
		) t5
		where
		exceedWater > 0
		) t6
		inner join (select id ,unit_name,unit_code from t_w_use_water_unit where deleted='0') as t7 on t7.id =t6.use_water_unit_id
		WHERE
		t6.id NOT IN (
		SELECT
		t.id
		FROM
		t_w_water_use_pay_info t
		WHERE
		( t.pay_status = 1 OR t.pay_status = 5 or edited_actual ='1' or  invoice_num is not null or invoice_num !='')
		)
		<if test="null !=countYear">
			and t6.countYear=#{countYear}
		</if>
		<if test="null !=countQuarter">
		  and t6.countQuarter=#{countQuarter}
		</if>
		<if test="unitIds.size()>0">
		  and t6.use_water_unit_id in
		<foreach collection="unitIds" item="useWaterUnitId" separator="," open="(" close=")">
			#{useWaterUnitId}
		</foreach>
		</if>
	</select>

	<update id="updateMoney">
		update t_w_water_use_pay_info
		set amountReceivable=amountReceivable-#{money},actualAmount=actualAmount-#{money}
		where id=#{id}
	</update>
</mapper>